1) In your own words, explain what clean code is and why it is important.

Solving the problem at hand is great, but at some point, somebody is going to need to be able to read and work with your code.

There are also huge benefits to writing clean code. People won't pester you to explain the things you've written. The Don't Repeat Yourself (DRY) principle saves time with upkeep and bug-hunting because all use cases funnel down to one section of the code. If you revisit your own code after a prolonged period, you won't have to spend time deciphering your own work.

2) Read this article about Toyota and their use of bad code. Although you may not yet understand all of the topics discussed, think about another commonly used object that relies on computers and explain what would happen if the code was not created to an acceptable standard.

An even deadlier version of the Toyota fauly accelerator seems to be playing out in the news as we speak with Boeing. Two Boeing 737 MAX planes have crashed in the last year due to a flaw in the anti-stalling software. Currently, the planes have been sidelined and Boeing is working on a software fix. The ordeal cost 350ish lives, has been a huge PR nightmare, loss of revenue for carriers as they refuse to use the plane, and a loss of revenue for Boeing as purchases of the 737 MAX have basically ceased. 

3) Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

```
FUNCTION do(x, y)              // Creating a new function
 IF y = "F" THEN               // Check if y is equal "F"
 SET z to (xâˆ’32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
 PRINT z                       // Print result
 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
 SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
 PRINT z                       // Print result
 END IF
END FUNCTION
```

a. Far too many comments. They can all be taken out.
b. Function name should be more descriptive.
c. Extraction could be used to create a "ConvertToCelcius" and "ConvertToFarenheiht" functions for further modularity.

```
FUNCTION convertTemperature(degrees, scale) 
	IF scale = 'F' THEN
		CALL convertToCelsius with degrees
	ELSE IF scale = 'C' THEN
		CALL convertToFarenheit with degrees
	ELSE
		PRINT "Error: Please enter degrees and scale"
	END IF
END FUNCTION


FUNCTION convertToCelsius(degrees) 
	SET temperatureCelsius to (degrees - 32) * (5/9)
	PRINT temperatureCelsius
END FUNCTION



FUNCTION convertToFarenheit(degrees) 
	SET temperatureFarenheit to (degrees * 1.8000 + 32.00)
	PRINT temperatureFarenheit
END FUNCTION
```

4) Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

```
FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION
```

I think this is passable code. The function name tells you what it does and only does one thing.

5) Using pseudocode, refactor the code for the following examples using the principles you have learned in this checkpoint.

a. 
```
FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION
```

Code repeats itself. (subTotal * discountRate) + (subTotal * tax) operations is used several times so I put that in its own function that returns a variable of the operation.

```
FUNCTION getTotalDue(subTotal, discountRate)
	SET totalDue to (subTotal * discountRate) + (subTotal * tax)
	return totalDue
END FUNCTION

FUNCTION processPayment(subTotal, discountRate, paymentType)
	CALL getTotalDue with subTotal, discountRate
	PRINT "Your total due is: " + totalDue
	
	IF paymentType = 'CASH' THEN
		CALL getPayment RETURNING amount
		PRINT "Change due: " + amount - totalDue
		
	ELSE IF paymentType = 'CREDIT CARD' THEN
		CALL getPayment RETURNING amount
		PRINT "Your credit card has been charged: " + totalDue
	END IF
END FUNCTION
```

b.
```
FUNCTION checkoutBook(book, guest)
 IF guest.accountActive THEN
     IF NOT(guest.hasOverdueBooks) THEN
         IF guest.outstandingFees = 0 THEN
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
         END IF
     END IF
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION
```

Too many IF statements. Condense to one line.

```
FUNCTION checkoutBook(book, guest)
	IF guest.accountActive && !guest.hasOverdueBooks && guest.outstandingFees = 0
		APPEND book to guest.books
		SET book.status to "Checked Out"
		PRINT "Your books have been issued"
	ELSE
		PRINT "Unable to checkout book."
	END IF
END FUNCTION
```

c.
```
CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 ....
 ....
 ....

END
```

CLASS BankAccount does too many things.

```
CLASS Money
	FUNCTION displayBalance
		PRINT balance
	END Function
	
	FUNCTION deposit(amount)
		SET balance to balance + amount
	END FUNCTION
	
	FUNCTION withdraw(amount)
		IF balance > amount THEN
			SET balance to balance - amount
		END IF
	END FUNCTION
END CLASS

CLASS Offers
	FUNCTION creditCardOffer
		IF NOT(customer.hasCreditCard) THEN
			CALL offerCreditCard
		END IF
	END FUNCTION
	
	FUNCTION checkStatus
		IF NOT(customer.hasCheckingAccount) THEN
			CALL offerCheckingAccount
		END IF
	 END FUNCTION
....
....
....
END CLASS
```

6) Square - Given an array of integers, find out whether the sum of the integers is a perfect square. If it is a perfect square, return the square root, otherwise return the sum.

```
isSumPerfectSquare = (arr) => {
  const reducer = (accumulator, currentValue) => accumulator + currentValue;
  let total = arr.reduce(reducer);
  if (Math.sqrt(total) % 1 === 0) {
    return Math.sqrt(total)
  } else {
    return total;
  }
}
```

7) Duplicate - Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value appears at least twice in the array, and false if every element is distinct.

```
hasDuplicates = (arr) => {
  let counts = [];
  for (let i = 0; i <= arr.length; i++) {
    if (counts[arr[i]] === undefined) {
      counts[arr[i]] = 1;
    } else {
      return true;
    }
  }
  return false;
}
```


8. Anagram - An anagram is a word, phrase, or name formed by rearranging the letters of another word. For example, spar can be formed from rasp. Given two strings, stringOne and stringTwo, determine if stringOne is an anagram of stringTwo. Assume that the strings contain only lowercase letters and do not worry about case-sensitivity. Hint: Your first task will be to convert the strings to arrays.

```
makeOrderedArray = (str) => {
  return [...str].sort();
};

isAnagram = (stringOne, stringTwo) => {
  arrOne = makeOrderedArray(stringOne);
  arrTwo = makeOrderedArray(stringTwo);
  for (i = 0; i < arrOne.length; i++) {
    if (arrOne[i] !== arrTwo[i]) return false;
  }
  return true;
}
```